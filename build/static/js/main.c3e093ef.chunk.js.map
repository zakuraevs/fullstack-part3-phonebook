{"version":3,"sources":["services/contacts.js","components/Contact.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Contact","props","contact","name","phone","onClick","window","confirm","contactService","setContacts","Notification","notificationStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","message","style","FilterField","value","filterValue","onChange","handleNewFilterValue","ContactForm","onSubmit","addContact","newName","handleNewName","newPhoneNum","handleNewPhoneNum","type","RenderingOfContacts","filteredContacts","contacts","filter","toLowerCase","includes","map","key","App","useState","setNewName","setNewPhoneNum","setFilterValue","notificationMessage","setNotificationMessage","notificationColor","setNotificationColor","useEffect","event","console","log","target","preventDefault","noteObject","number","find","date","setTimeout","catch","error","c","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3e093ef.chunk.js","sourcesContent":["import axios from 'axios'\n\n//Should be changed to relative URL according to course\n//but i dont get why\n//EDIT: changed\n//I get why now: if it's not relative and I want to test\n//frontend locally, it will still load data from the remote url\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteContact = id => {\n    const request = axios.delete(baseUrl+'/'+id)\n    return request.then(response => response.data)\n}\n\nconst updatePhone = (id ,newObject) => {\nconst request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {getAll, create, deleteContact, updatePhone}","import React from 'react'\nimport contactService from '../services/contacts'\n\nconst Contact = (props) => {\n\n  const removeContact = () => {\n    const result = window.confirm(`Delete ${props.contact.name} ?`)\n    if(result) {\n      contactService.deleteContact(props.contact.id)\n        .then(data => {\n          contactService.getAll().then(data => {props.setContacts(data)})\n      })\n    }\n  }\n\n  return (\n    <div>{props.contact.name} {props.contact.phone} <button onClick={removeContact}>delete</button></div>\n  )\n}\n\nexport default Contact\n","import React from 'react'\n\nconst Notification = (props) => {\n\n    const notificationStyle = {\n        color: props.color,\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n      \n\n    if (props.message === null) {\n      return null\n    }\n  \n    return (\n      <div style={notificationStyle} >\n        {props.message}\n      </div>\n    )\n  }\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Contact from './components/Contact'\nimport Notification from './components/Notification' \nimport contactService from './services/contacts'\n\n//Component for filter field\nconst FilterField = (props) => {\n  return (\n    <div>\n        filter contacts: <input\n          value={props.filterValue}\n          onChange={props.handleNewFilterValue}\n        />\n    </div>\n)}\n\n//Component for form to add new contacts\nconst ContactForm = (props) => {\n  return(\n    <form onSubmit={props.addContact}>\n    <div>\n      name: <input \n        value={props.newName}\n        onChange={props.handleNewName}\n      />\n    </div>\n    <div>\n      number: <input \n        value={props.newPhoneNum}\n        onChange={props.handleNewPhoneNum}\n      />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n    </form>\n)}\n\n//Component that renders existing contacts that meet filtering criteria\nconst RenderingOfContacts = (props) => {\n\n  //contacts that contain the search field text\n  const filteredContacts = props.contacts\n    .filter(contact => contact.name.toLowerCase()\n    .includes(props.filterValue.toLowerCase()))\n\n  //filtererd contacts, each mapped to a Contact component  \n  return(\n    <div>\n      {\n        filteredContacts.map(contact => <Contact\n          key={contact.name}\n          contact={contact}\n          setContacts={props.setContacts}\n          contacts={props.contacts} />\n        )}\n    </div>\n)}\n\nconst App = () => {\n  //stat that stores contact objects\n  //hard-coded test contacts\n  const [ contacts, setContacts ] = useState([\n    { name: 'Arto Hellas', phone: '040-123456', id: 'Arto Hellas' },\n    { name: 'Ada Lovelace', phone: '39-44-5323523', id: 'Ada Lovelace' },\n    { name: 'Dan Abramov', phone: '12-43-234345', id: 'Dan Abramov' },\n    { name: 'Mary Poppendieck', phone: '39-23-6423122', id: 'Mary Poppendieck' }\n  ])\n  //state that stores the value of new name being added, i.e. what is currently typed in the name field\n  const [ newName, setNewName ] = useState('')\n  //state that stores the value of new name phone number added, i.e. what is currently typed in the number field\n  const [ newPhoneNum, setNewPhoneNum ] = useState('')\n  //state that stores the current value of the filter field\n  const [ filterValue, setFilterValue ] = useState('')\n  //state, stores value of notification message\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  //state, stores value of notification color\n  const [notificationColor, setNotificationColor] = useState('green')\n\n  //Effect hook that calls the function defined within curly braces whenever the page is re-rendered\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(data => {\n        setContacts(data)\n      })\n  }, [])\n\n  //function that is called when the 'add' button is clicked. Adds new object to array of contacts, resets several states\n  const addContact = (event) => {\n    event.preventDefault()\n\n    const noteObject = {\n      name: newName,\n      number: newPhoneNum,\n    }\n\n    if(contacts.map(contact => contact.name).includes(newName)) {\n\n      const result = window.confirm(`${newName} is already added to the phonebook. Update the old number with a new one?`)\n\n      if(result) {\n        contactService\n          .updatePhone(contacts.find(contact => contact.name === newName).id, noteObject)\n          .then(date => {\n            contactService.getAll().then(data => {setContacts(data)})\n            setNewName('')\n            setNewPhoneNum('')\n            setNotificationMessage(`Updated ${newName}'s phone`)\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setNotificationColor('red')\n            setNotificationMessage(\n              `Information of ${newName} was already removed from server`\n            )\n            setTimeout(() => {\n              setNotificationColor('green')\n              setNotificationMessage(null)\n            }, 5000)\n            setContacts(contacts.filter(c => c.id !== contacts.find(contact => contact.name === newName).id,))\n          })\n        }\n    } else {\n      contactService\n        .create(noteObject)\n        .then(data => {\n          setContacts(contacts.concat(data))\n          setNewName('')\n          setNewPhoneNum('')\n          setNotificationMessage(`Added ${newName}`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  //Event handlers for the 3 forms used in the app\n  const handleNewName = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNewPhoneNum = (event) => {\n    console.log(event.target.value)\n    setNewPhoneNum(event.target.value)\n  }\n\n  const handleNewFilterValue = (event) => {\n    console.log(event.target.value)\n    setFilterValue(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={notificationMessage} color={notificationColor}/>\n      \n      < FilterField filterValue={filterValue} handleNewFilterValue={handleNewFilterValue}  />\n      \n      < ContactForm addContact={addContact} newName={newName} handleNewName={handleNewName} newPhoneNum={newPhoneNum} handleNewPhoneNum={handleNewPhoneNum}/>\n\n      <h2>Numbers</h2>\n        \n      < RenderingOfContacts setContacts={setContacts} contacts={contacts} filterValue={filterValue} />\n\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}